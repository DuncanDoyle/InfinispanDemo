<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.jboss.ddoyle.osc2013.infinispan.demo</groupId>
	<artifactId>InfinispanHybridModeServerWeb</artifactId>
	<version>0.0.2-SNAPSHOT</version>
	<packaging>war</packaging>
	<properties>
		<infinispan.version>7.0.0-SNAPSHOT</infinispan.version>
	</properties>
	<dependencyManagement>
		<dependencies>
			<!-- Define the version of JBoss' Java EE 6 APIs we want to import. Any dependencies from org.jboss.spec will have their version defined by 
				this BOM -->
			<!-- JBoss distributes a complete set of Java EE 6 APIs including a Bill of Materials (BOM). A BOM specifies the versions of a "stack" (or 
				a collection) of artifacts. We use this here so that we always get the correct versions of artifacts. Here we use the jboss-javaee-web-6.0 stack 
				(you can read this as the JBoss stack of the Java EE Web Profile 6 APIs), and we use version 2.0.0.Final which is the latest release of the stack. 
				You can actually use this stack with any version of JBoss AS that implements Java EE 6, not just JBoss AS 7! -->
			<dependency>
				<groupId>org.jboss.spec</groupId>
				<artifactId>jboss-javaee-web-6.0</artifactId>
				<version>3.0.2.Final</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<!-- To store RH Summit commands. -->
		<!-- 
		<dependency>
			<groupId>org.jboss.ddoyle.rhsummit2014.hacepbrms</groupId>
			<artifactId>RHSummitHaCepCommands</artifactId>
			<version>1.0.0</version>
			<scope>compile</scope>
		</dependency>
		 -->
		 
		<!-- Project Dependencies -->
		<dependency>
		 	<groupId>org.jboss.ddoyle.osc2013.infinispan.demo</groupId>
		 	<artifactId>InfinispanDemoDataModel</artifactId>
		 	<version>0.0.2-SNAPSHOT</version>
		 	<scope>compile</scope>
		</dependency>
	
		<dependency>
			<groupId>org.infinispan</groupId>
			<artifactId>infinispan-core</artifactId>
			<version>${infinispan.version}</version>
			<scope>compile</scope>
			<exclusions>
				<exclusion>
					<artifactId>jboss-logging</artifactId>
					<groupId>org.jboss.logging</groupId>
				</exclusion>
				<!-- <exclusion> <artifactId>jboss-marshalling</artifactId> <groupId>org.jboss.marshalling</groupId> </exclusion> <exclusion> <artifactId>jboss-marshalling-river</artifactId> 
					<groupId>org.jboss.marshalling</groupId> </exclusion> -->
				<exclusion>
					<artifactId>
						jboss-transaction-api_1.1_spec
					</artifactId>
					<groupId>org.jboss.spec.javax.transaction</groupId>
				</exclusion>
				<!-- <exclusion> <artifactId>rhq-pluginAnnotations</artifactId> <groupId>org.rhq.helpers</groupId> </exclusion> -->
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.infinispan</groupId>
			<artifactId>infinispan-cdi</artifactId>
			<version>${infinispan.version}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.infinispan</groupId>
			<artifactId>infinispan-server-core</artifactId>
			<version>${infinispan.version}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.infinispan</groupId>
			<artifactId>infinispan-server-hotrod</artifactId>
			<version>${infinispan.version}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.infinispan</groupId>
			<artifactId>infinispan-cachestore-jdbc</artifactId>
			 
			<version>${infinispan.version}</version>
			
			<scope>compile</scope>
		</dependency>
		<!-- Explicitly use the Red Hat version of this JAR, the one from .org seems to give issues -->
		<dependency>
			<groupId>gnu-getopt</groupId>
			<artifactId>getopt</artifactId>
			<version>1.0.13-redhat-2</version>
			<scope>compile</scope>
		</dependency>
		
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.7.5</version>
			<scope>compile</scope>
		</dependency>
		
		<!-- First declare the APIs we depend on and need for compilation. All of them are provided by JBoss AS 7 -->

		<!-- Import the CDI API, we use provided scope as the API is included in JBoss AS 7 -->
		<dependency>
			<groupId>javax.enterprise</groupId>
			<artifactId>cdi-api</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.spec.javax.servlet</groupId>
			<artifactId>jboss-servlet-api_3.0_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Import the Common Annotations API (JSR-250), we use provided scope as the API is included in JBoss AS 7 -->
		<!-- <dependency> <groupId>org.jboss.spec.javax.annotation</groupId> <artifactId>jboss-annotations-api_1.1_spec</artifactId> <scope>provided</scope> 
			</dependency> -->


		<!-- Import the JAX-RS API, we use provided scope as the API is included in JBoss AS 7 -->
		<!-- <dependency> <groupId>org.jboss.spec.javax.ws.rs</groupId> <artifactId>jboss-jaxrs-api_1.1_spec</artifactId> <scope>provided</scope> </dependency> -->

		<!-- Import the JPA API, we use provided scope as the API is included in JBoss AS 7 -->
		<!-- x <dependency> <groupId>org.hibernate.javax.persistence</groupId> <artifactId>hibernate-jpa-2.0-api</artifactId> <scope>provided</scope> 
			</dependency> -->

		<!-- Import the EJB API, we use provided scope as the API is included in JBoss AS 7 -->
		<dependency>
			<groupId>org.jboss.spec.javax.ejb</groupId>
			<artifactId>jboss-ejb-api_3.1_spec</artifactId>
			<scope>provided</scope>
		</dependency>


		<!-- JSR-303 (Bean Validation) Implementation -->
		<!-- Provides portable constraints such as @Email -->
		<!-- Hibernate Validator is shipped in JBoss AS 7 -->
		<!-- <dependency> <groupId>org.hibernate</groupId> <artifactId>hibernate-validator</artifactId> <version>4.2.0.Final</version> <scope>provided</scope> 
			<exclusions> <exclusion> <groupId>org.slf4j</groupId> <artifactId>slf4j-api</artifactId> </exclusion> </exclusions> </dependency> -->

		<!-- Now we declare any tools needed -->

		<!-- Annotation processor to generate the JPA 2.0 metamodel classes for typesafe criteria queries -->
		<!-- <dependency> <groupId>org.hibernate</groupId> <artifactId>hibernate-jpamodelgen</artifactId> <version>1.1.1.Final</version> <scope>provided</scope> 
			</dependency> -->

		<!-- Needed for running tests (you may also use TestNG) -->
		<!-- <dependency> <groupId>junit</groupId> <artifactId>junit</artifactId> <version>4.10</version> <scope>test</scope> </dependency> -->

		<!-- Optional, but highly recommended -->
		<!-- Arquillian allows you to test enterprise code such as EJBs and Transactional(JTA) JPA from JUnit/TestNG -->
		<!-- <dependency> <groupId>org.jboss.arquillian.junit</groupId> <artifactId>arquillian-junit-container</artifactId> <version>1.0.0.CR4</version> 
			<scope>test</scope> </dependency> -->

	</dependencies>

	<build>
		<!-- Maven will append the version to the finalName (which is the name given to the generated war, and hence the context root) -->
		<finalName>${project.artifactId}</finalName>
		<plugins>
			<!-- Compiler plugin enforces Java 1.6 compatibility and activates annotation processors -->
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<source>1.7</source>
					<target>1.7</target>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.1.1</version>
				<configuration>
					<!-- Java EE 6 doesn't require web.xml, Maven needs to catch up! -->
					<failOnMissingWebXml>false</failOnMissingWebXml>
				</configuration>
			</plugin>
		</plugins>
	</build>


</project>